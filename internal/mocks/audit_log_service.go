// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/martinusiron/PayFlow/internal/auditlog/domain"
	mock "github.com/stretchr/testify/mock"
)

// AuditLogService is an autogenerated mock type for the AuditLogService type
type AuditLogService struct {
	mock.Mock
}

// FetchUserLogs provides a mock function with given fields: ctx, userID
func (_m *AuditLogService) FetchUserLogs(ctx context.Context, userID int) ([]domain.AuditLog, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FetchUserLogs")
	}

	var r0 []domain.AuditLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]domain.AuditLog, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []domain.AuditLog); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.AuditLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Record provides a mock function with given fields: ctx, log
func (_m *AuditLogService) Record(ctx context.Context, log domain.AuditLog) error {
	ret := _m.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for Record")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.AuditLog) error); ok {
		r0 = rf(ctx, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuditLogService creates a new instance of AuditLogService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuditLogService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuditLogService {
	mock := &AuditLogService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
