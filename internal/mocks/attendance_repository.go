// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/martinusiron/PayFlow/internal/attendance/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// AttendanceRepository is an autogenerated mock type for the AttendanceRepository type
type AttendanceRepository struct {
	mock.Mock
}

// CountWeekdaysByUserID provides a mock function with given fields: ctx, userID, start, end
func (_m *AttendanceRepository) CountWeekdaysByUserID(ctx context.Context, userID int, start time.Time, end time.Time) (int, error) {
	ret := _m.Called(ctx, userID, start, end)

	if len(ret) == 0 {
		panic("no return value specified for CountWeekdaysByUserID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, time.Time, time.Time) (int, error)); ok {
		return rf(ctx, userID, start, end)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, time.Time, time.Time) int); ok {
		r0 = rf(ctx, userID, start, end)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, time.Time, time.Time) error); ok {
		r1 = rf(ctx, userID, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttendanceByUser provides a mock function with given fields: ctx, userID, start, end
func (_m *AttendanceRepository) GetAttendanceByUser(ctx context.Context, userID int, start string, end string) ([]domain.Attendance, error) {
	ret := _m.Called(ctx, userID, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetAttendanceByUser")
	}

	var r0 []domain.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string) ([]domain.Attendance, error)); ok {
		return rf(ctx, userID, start, end)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string) []domain.Attendance); ok {
		r0 = rf(ctx, userID, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Attendance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, string) error); ok {
		r1 = rf(ctx, userID, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitAttendance provides a mock function with given fields: ctx, att
func (_m *AttendanceRepository) SubmitAttendance(ctx context.Context, att domain.Attendance) error {
	ret := _m.Called(ctx, att)

	if len(ret) == 0 {
		panic("no return value specified for SubmitAttendance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Attendance) error); ok {
		r0 = rf(ctx, att)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAttendanceRepository creates a new instance of AttendanceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAttendanceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AttendanceRepository {
	mock := &AttendanceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
