// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	domain "github.com/martinusiron/PayFlow/internal/payroll/domain"

	mock "github.com/stretchr/testify/mock"

	shared "github.com/martinusiron/PayFlow/internal/shared"

	time "time"
)

// ServiceInterface is an autogenerated mock type for the ServiceInterface type
type ServiceInterface struct {
	mock.Mock
}

// CalculateAllEmployees provides a mock function with given fields: ctx, start, end
func (_m *ServiceInterface) CalculateAllEmployees(ctx context.Context, start time.Time, end time.Time) ([]domain.ProcessedPayroll, error) {
	ret := _m.Called(ctx, start, end)

	if len(ret) == 0 {
		panic("no return value specified for CalculateAllEmployees")
	}

	var r0 []domain.ProcessedPayroll
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]domain.ProcessedPayroll, error)); ok {
		return rf(ctx, start, end)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []domain.ProcessedPayroll); ok {
		r0 = rf(ctx, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProcessedPayroll)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtractRequestContext provides a mock function with given fields: ctx, r
func (_m *ServiceInterface) ExtractRequestContext(ctx context.Context, r *http.Request) shared.RequestContext {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for ExtractRequestContext")
	}

	var r0 shared.RequestContext
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) shared.RequestContext); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(shared.RequestContext)
	}

	return r0
}

// LogAudit provides a mock function with given fields: ctx, userID, action, table, recordID, requestID, ip
func (_m *ServiceInterface) LogAudit(ctx context.Context, userID int, action string, table string, recordID int, requestID string, ip string) {
	_m.Called(ctx, userID, action, table, recordID, requestID, ip)
}

// NewServiceInterface creates a new instance of ServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceInterface {
	mock := &ServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
